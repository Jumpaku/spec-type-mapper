// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: api/example.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExampleRequest_Enum int32

const (
	ExampleRequest_EnumA ExampleRequest_Enum = 0
	ExampleRequest_EnumB ExampleRequest_Enum = 1
	ExampleRequest_EnumC ExampleRequest_Enum = 2
)

// Enum value maps for ExampleRequest_Enum.
var (
	ExampleRequest_Enum_name = map[int32]string{
		0: "EnumA",
		1: "EnumB",
		2: "EnumC",
	}
	ExampleRequest_Enum_value = map[string]int32{
		"EnumA": 0,
		"EnumB": 1,
		"EnumC": 2,
	}
)

func (x ExampleRequest_Enum) Enum() *ExampleRequest_Enum {
	p := new(ExampleRequest_Enum)
	*p = x
	return p
}

func (x ExampleRequest_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleRequest_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_example_proto_enumTypes[0].Descriptor()
}

func (ExampleRequest_Enum) Type() protoreflect.EnumType {
	return &file_api_example_proto_enumTypes[0]
}

func (x ExampleRequest_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleRequest_Enum.Descriptor instead.
func (ExampleRequest_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_example_proto_rawDescGZIP(), []int{2, 0}
}

type ExampleResponse_Enum int32

const (
	ExampleResponse_EnumA ExampleResponse_Enum = 0
	ExampleResponse_EnumB ExampleResponse_Enum = 1
	ExampleResponse_EnumC ExampleResponse_Enum = 2
)

// Enum value maps for ExampleResponse_Enum.
var (
	ExampleResponse_Enum_name = map[int32]string{
		0: "EnumA",
		1: "EnumB",
		2: "EnumC",
	}
	ExampleResponse_Enum_value = map[string]int32{
		"EnumA": 0,
		"EnumB": 1,
		"EnumC": 2,
	}
)

func (x ExampleResponse_Enum) Enum() *ExampleResponse_Enum {
	p := new(ExampleResponse_Enum)
	*p = x
	return p
}

func (x ExampleResponse_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleResponse_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_example_proto_enumTypes[1].Descriptor()
}

func (ExampleResponse_Enum) Type() protoreflect.EnumType {
	return &file_api_example_proto_enumTypes[1]
}

func (x ExampleResponse_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleResponse_Enum.Descriptor instead.
func (ExampleResponse_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_example_proto_rawDescGZIP(), []int{3, 0}
}

type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_example_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_example_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_api_example_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HelloRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelloRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Method  string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_example_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_example_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_api_example_proto_rawDescGZIP(), []int{1}
}

func (x *HelloResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HelloResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type ExampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue           float64                   `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue            float32                   `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int32Value            int32                     `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value            int64                     `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value           uint32                    `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value           uint64                    `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	BoolValue             bool                      `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue           string                    `protobuf:"bytes,8,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue            []byte                    `protobuf:"bytes,9,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	EnumValue             ExampleRequest_Enum       `protobuf:"varint,13,opt,name=enum_value,json=enumValue,proto3,enum=api.ExampleRequest_Enum" json:"enum_value,omitempty"`
	MessageValue          *ExampleRequest_Message   `protobuf:"bytes,14,opt,name=message_value,json=messageValue,proto3" json:"message_value,omitempty"`
	RepeatedValue         []*ExampleRequest_Message `protobuf:"bytes,15,rep,name=repeated_value,json=repeatedValue,proto3" json:"repeated_value,omitempty"`
	WrapperspbBoolValue   *wrapperspb.BoolValue     `protobuf:"bytes,30,opt,name=wrapperspb_bool_value,json=wrapperspbBoolValue,proto3" json:"wrapperspb_bool_value,omitempty"`
	WrapperspbBytesValue  *wrapperspb.BytesValue    `protobuf:"bytes,31,opt,name=wrapperspb_bytes_value,json=wrapperspbBytesValue,proto3" json:"wrapperspb_bytes_value,omitempty"`
	WrapperspbDoubleValue *wrapperspb.DoubleValue   `protobuf:"bytes,32,opt,name=wrapperspb_double_value,json=wrapperspbDoubleValue,proto3" json:"wrapperspb_double_value,omitempty"`
	WrapperspbFloatValue  *wrapperspb.FloatValue    `protobuf:"bytes,33,opt,name=wrapperspb_float_value,json=wrapperspbFloatValue,proto3" json:"wrapperspb_float_value,omitempty"`
	WrapperspbInt32Value  *wrapperspb.Int32Value    `protobuf:"bytes,34,opt,name=wrapperspb_int32_value,json=wrapperspbInt32Value,proto3" json:"wrapperspb_int32_value,omitempty"`
	WrapperspbInt64Value  *wrapperspb.Int64Value    `protobuf:"bytes,35,opt,name=wrapperspb_int64_value,json=wrapperspbInt64Value,proto3" json:"wrapperspb_int64_value,omitempty"`
	WrapperspbStringValue *wrapperspb.StringValue   `protobuf:"bytes,36,opt,name=wrapperspb_string_value,json=wrapperspbStringValue,proto3" json:"wrapperspb_string_value,omitempty"`
	WrapperspbUint32Value *wrapperspb.UInt32Value   `protobuf:"bytes,37,opt,name=wrapperspb_uint32_value,json=wrapperspbUint32Value,proto3" json:"wrapperspb_uint32_value,omitempty"`
	WrapperspbUint64Value *wrapperspb.UInt64Value   `protobuf:"bytes,38,opt,name=wrapperspb_uint64_value,json=wrapperspbUint64Value,proto3" json:"wrapperspb_uint64_value,omitempty"`
	TimestampValue        *timestamppb.Timestamp    `protobuf:"bytes,39,opt,name=timestamp_value,json=timestampValue,proto3" json:"timestamp_value,omitempty"`
	// Types that are assignable to OneofValue:
	//
	//	*ExampleRequest_OneofOptionA
	//	*ExampleRequest_OneofOptionB
	//	*ExampleRequest_OneofOptionC
	OneofValue isExampleRequest_OneofValue `protobuf_oneof:"oneof_value"`
}

func (x *ExampleRequest) Reset() {
	*x = ExampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_example_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleRequest) ProtoMessage() {}

func (x *ExampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_example_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleRequest.ProtoReflect.Descriptor instead.
func (*ExampleRequest) Descriptor() ([]byte, []int) {
	return file_api_example_proto_rawDescGZIP(), []int{2}
}

func (x *ExampleRequest) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ExampleRequest) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *ExampleRequest) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *ExampleRequest) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *ExampleRequest) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *ExampleRequest) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *ExampleRequest) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *ExampleRequest) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *ExampleRequest) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *ExampleRequest) GetEnumValue() ExampleRequest_Enum {
	if x != nil {
		return x.EnumValue
	}
	return ExampleRequest_EnumA
}

func (x *ExampleRequest) GetMessageValue() *ExampleRequest_Message {
	if x != nil {
		return x.MessageValue
	}
	return nil
}

func (x *ExampleRequest) GetRepeatedValue() []*ExampleRequest_Message {
	if x != nil {
		return x.RepeatedValue
	}
	return nil
}

func (x *ExampleRequest) GetWrapperspbBoolValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.WrapperspbBoolValue
	}
	return nil
}

func (x *ExampleRequest) GetWrapperspbBytesValue() *wrapperspb.BytesValue {
	if x != nil {
		return x.WrapperspbBytesValue
	}
	return nil
}

func (x *ExampleRequest) GetWrapperspbDoubleValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WrapperspbDoubleValue
	}
	return nil
}

func (x *ExampleRequest) GetWrapperspbFloatValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.WrapperspbFloatValue
	}
	return nil
}

func (x *ExampleRequest) GetWrapperspbInt32Value() *wrapperspb.Int32Value {
	if x != nil {
		return x.WrapperspbInt32Value
	}
	return nil
}

func (x *ExampleRequest) GetWrapperspbInt64Value() *wrapperspb.Int64Value {
	if x != nil {
		return x.WrapperspbInt64Value
	}
	return nil
}

func (x *ExampleRequest) GetWrapperspbStringValue() *wrapperspb.StringValue {
	if x != nil {
		return x.WrapperspbStringValue
	}
	return nil
}

func (x *ExampleRequest) GetWrapperspbUint32Value() *wrapperspb.UInt32Value {
	if x != nil {
		return x.WrapperspbUint32Value
	}
	return nil
}

func (x *ExampleRequest) GetWrapperspbUint64Value() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WrapperspbUint64Value
	}
	return nil
}

func (x *ExampleRequest) GetTimestampValue() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampValue
	}
	return nil
}

func (m *ExampleRequest) GetOneofValue() isExampleRequest_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (x *ExampleRequest) GetOneofOptionA() *ExampleRequest_Message {
	if x, ok := x.GetOneofValue().(*ExampleRequest_OneofOptionA); ok {
		return x.OneofOptionA
	}
	return nil
}

func (x *ExampleRequest) GetOneofOptionB() string {
	if x, ok := x.GetOneofValue().(*ExampleRequest_OneofOptionB); ok {
		return x.OneofOptionB
	}
	return ""
}

func (x *ExampleRequest) GetOneofOptionC() int64 {
	if x, ok := x.GetOneofValue().(*ExampleRequest_OneofOptionC); ok {
		return x.OneofOptionC
	}
	return 0
}

type isExampleRequest_OneofValue interface {
	isExampleRequest_OneofValue()
}

type ExampleRequest_OneofOptionA struct {
	OneofOptionA *ExampleRequest_Message `protobuf:"bytes,40,opt,name=oneof_option_a,json=oneofOptionA,proto3,oneof"`
}

type ExampleRequest_OneofOptionB struct {
	OneofOptionB string `protobuf:"bytes,41,opt,name=oneof_option_b,json=oneofOptionB,proto3,oneof"`
}

type ExampleRequest_OneofOptionC struct {
	OneofOptionC int64 `protobuf:"varint,42,opt,name=oneof_option_c,json=oneofOptionC,proto3,oneof"`
}

func (*ExampleRequest_OneofOptionA) isExampleRequest_OneofValue() {}

func (*ExampleRequest_OneofOptionB) isExampleRequest_OneofValue() {}

func (*ExampleRequest_OneofOptionC) isExampleRequest_OneofValue() {}

type ExampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue           float64                    `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue            float32                    `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int32Value            int32                      `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value            int64                      `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value           uint32                     `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value           uint64                     `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	BoolValue             bool                       `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue           string                     `protobuf:"bytes,8,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue            []byte                     `protobuf:"bytes,9,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	EnumValue             ExampleResponse_Enum       `protobuf:"varint,13,opt,name=enum_value,json=enumValue,proto3,enum=api.ExampleResponse_Enum" json:"enum_value,omitempty"`
	MessageValue          *ExampleResponse_Message   `protobuf:"bytes,14,opt,name=message_value,json=messageValue,proto3" json:"message_value,omitempty"`
	RepeatedValue         []*ExampleResponse_Message `protobuf:"bytes,15,rep,name=repeated_value,json=repeatedValue,proto3" json:"repeated_value,omitempty"`
	WrapperspbBoolValue   *wrapperspb.BoolValue      `protobuf:"bytes,30,opt,name=wrapperspb_bool_value,json=wrapperspbBoolValue,proto3" json:"wrapperspb_bool_value,omitempty"`
	WrapperspbBytesValue  *wrapperspb.BytesValue     `protobuf:"bytes,31,opt,name=wrapperspb_bytes_value,json=wrapperspbBytesValue,proto3" json:"wrapperspb_bytes_value,omitempty"`
	WrapperspbDoubleValue *wrapperspb.DoubleValue    `protobuf:"bytes,32,opt,name=wrapperspb_double_value,json=wrapperspbDoubleValue,proto3" json:"wrapperspb_double_value,omitempty"`
	WrapperspbFloatValue  *wrapperspb.FloatValue     `protobuf:"bytes,33,opt,name=wrapperspb_float_value,json=wrapperspbFloatValue,proto3" json:"wrapperspb_float_value,omitempty"`
	WrapperspbInt32Value  *wrapperspb.Int32Value     `protobuf:"bytes,34,opt,name=wrapperspb_int32_value,json=wrapperspbInt32Value,proto3" json:"wrapperspb_int32_value,omitempty"`
	WrapperspbInt64Value  *wrapperspb.Int64Value     `protobuf:"bytes,35,opt,name=wrapperspb_int64_value,json=wrapperspbInt64Value,proto3" json:"wrapperspb_int64_value,omitempty"`
	WrapperspbStringValue *wrapperspb.StringValue    `protobuf:"bytes,36,opt,name=wrapperspb_string_value,json=wrapperspbStringValue,proto3" json:"wrapperspb_string_value,omitempty"`
	WrapperspbUint32Value *wrapperspb.UInt32Value    `protobuf:"bytes,37,opt,name=wrapperspb_uint32_value,json=wrapperspbUint32Value,proto3" json:"wrapperspb_uint32_value,omitempty"`
	WrapperspbUint64Value *wrapperspb.UInt64Value    `protobuf:"bytes,38,opt,name=wrapperspb_uint64_value,json=wrapperspbUint64Value,proto3" json:"wrapperspb_uint64_value,omitempty"`
	TimestampValue        *timestamppb.Timestamp     `protobuf:"bytes,39,opt,name=timestamp_value,json=timestampValue,proto3" json:"timestamp_value,omitempty"`
	// Types that are assignable to OneofValue:
	//
	//	*ExampleResponse_OneofOptionA
	//	*ExampleResponse_OneofOptionB
	//	*ExampleResponse_OneofOptionC
	OneofValue isExampleResponse_OneofValue `protobuf_oneof:"oneof_value"`
}

func (x *ExampleResponse) Reset() {
	*x = ExampleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_example_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleResponse) ProtoMessage() {}

func (x *ExampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_example_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleResponse.ProtoReflect.Descriptor instead.
func (*ExampleResponse) Descriptor() ([]byte, []int) {
	return file_api_example_proto_rawDescGZIP(), []int{3}
}

func (x *ExampleResponse) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ExampleResponse) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *ExampleResponse) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *ExampleResponse) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *ExampleResponse) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *ExampleResponse) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *ExampleResponse) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *ExampleResponse) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *ExampleResponse) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *ExampleResponse) GetEnumValue() ExampleResponse_Enum {
	if x != nil {
		return x.EnumValue
	}
	return ExampleResponse_EnumA
}

func (x *ExampleResponse) GetMessageValue() *ExampleResponse_Message {
	if x != nil {
		return x.MessageValue
	}
	return nil
}

func (x *ExampleResponse) GetRepeatedValue() []*ExampleResponse_Message {
	if x != nil {
		return x.RepeatedValue
	}
	return nil
}

func (x *ExampleResponse) GetWrapperspbBoolValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.WrapperspbBoolValue
	}
	return nil
}

func (x *ExampleResponse) GetWrapperspbBytesValue() *wrapperspb.BytesValue {
	if x != nil {
		return x.WrapperspbBytesValue
	}
	return nil
}

func (x *ExampleResponse) GetWrapperspbDoubleValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WrapperspbDoubleValue
	}
	return nil
}

func (x *ExampleResponse) GetWrapperspbFloatValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.WrapperspbFloatValue
	}
	return nil
}

func (x *ExampleResponse) GetWrapperspbInt32Value() *wrapperspb.Int32Value {
	if x != nil {
		return x.WrapperspbInt32Value
	}
	return nil
}

func (x *ExampleResponse) GetWrapperspbInt64Value() *wrapperspb.Int64Value {
	if x != nil {
		return x.WrapperspbInt64Value
	}
	return nil
}

func (x *ExampleResponse) GetWrapperspbStringValue() *wrapperspb.StringValue {
	if x != nil {
		return x.WrapperspbStringValue
	}
	return nil
}

func (x *ExampleResponse) GetWrapperspbUint32Value() *wrapperspb.UInt32Value {
	if x != nil {
		return x.WrapperspbUint32Value
	}
	return nil
}

func (x *ExampleResponse) GetWrapperspbUint64Value() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WrapperspbUint64Value
	}
	return nil
}

func (x *ExampleResponse) GetTimestampValue() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampValue
	}
	return nil
}

func (m *ExampleResponse) GetOneofValue() isExampleResponse_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (x *ExampleResponse) GetOneofOptionA() *ExampleResponse_Message {
	if x, ok := x.GetOneofValue().(*ExampleResponse_OneofOptionA); ok {
		return x.OneofOptionA
	}
	return nil
}

func (x *ExampleResponse) GetOneofOptionB() string {
	if x, ok := x.GetOneofValue().(*ExampleResponse_OneofOptionB); ok {
		return x.OneofOptionB
	}
	return ""
}

func (x *ExampleResponse) GetOneofOptionC() int64 {
	if x, ok := x.GetOneofValue().(*ExampleResponse_OneofOptionC); ok {
		return x.OneofOptionC
	}
	return 0
}

type isExampleResponse_OneofValue interface {
	isExampleResponse_OneofValue()
}

type ExampleResponse_OneofOptionA struct {
	OneofOptionA *ExampleResponse_Message `protobuf:"bytes,40,opt,name=oneof_option_a,json=oneofOptionA,proto3,oneof"`
}

type ExampleResponse_OneofOptionB struct {
	OneofOptionB string `protobuf:"bytes,41,opt,name=oneof_option_b,json=oneofOptionB,proto3,oneof"`
}

type ExampleResponse_OneofOptionC struct {
	OneofOptionC int64 `protobuf:"varint,42,opt,name=oneof_option_c,json=oneofOptionC,proto3,oneof"`
}

func (*ExampleResponse_OneofOptionA) isExampleResponse_OneofValue() {}

func (*ExampleResponse_OneofOptionB) isExampleResponse_OneofValue() {}

func (*ExampleResponse_OneofOptionC) isExampleResponse_OneofValue() {}

type ExampleRequest_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prop string `protobuf:"bytes,1,opt,name=prop,proto3" json:"prop,omitempty"`
}

func (x *ExampleRequest_Message) Reset() {
	*x = ExampleRequest_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_example_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleRequest_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleRequest_Message) ProtoMessage() {}

func (x *ExampleRequest_Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_example_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleRequest_Message.ProtoReflect.Descriptor instead.
func (*ExampleRequest_Message) Descriptor() ([]byte, []int) {
	return file_api_example_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ExampleRequest_Message) GetProp() string {
	if x != nil {
		return x.Prop
	}
	return ""
}

type ExampleResponse_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prop string `protobuf:"bytes,1,opt,name=prop,proto3" json:"prop,omitempty"`
}

func (x *ExampleResponse_Message) Reset() {
	*x = ExampleResponse_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_example_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleResponse_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleResponse_Message) ProtoMessage() {}

func (x *ExampleResponse_Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_example_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleResponse_Message.ProtoReflect.Descriptor instead.
func (*ExampleResponse_Message) Descriptor() ([]byte, []int) {
	return file_api_example_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ExampleResponse_Message) GetProp() string {
	if x != nil {
		return x.Prop
	}
	return ""
}

var File_api_example_proto protoreflect.FileDescriptor

var file_api_example_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x41, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xa3, 0x0c, 0x0a, 0x0e, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70,
	0x62, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x70, 0x62, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a,
	0x17, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70,
	0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x70, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x62, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x17,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x70, 0x62, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x1a, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x22, 0x27, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x41, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e,
	0x75, 0x6d, 0x42, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x10, 0x02,
	0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xa8, 0x0c, 0x0a, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x43, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x62, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x62, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x62, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a,
	0x16, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x51, 0x0a, 0x16, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x70, 0x62, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70,
	0x62, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x17,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x1a, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72,
	0x6f, 0x70, 0x22, 0x27, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e,
	0x75, 0x6d, 0x41, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x10, 0x02, 0x42, 0x0d, 0x0a, 0x0b, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xa9, 0x04, 0x0a, 0x0f, 0x47,
	0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22,
	0x08, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4c, 0x0a, 0x09,
	0x50, 0x6f, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4e, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x2a, 0x0d, 0x2f, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4b, 0x0a, 0x08, 0x50, 0x75,
	0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x1a, 0x0d, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4d, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x32, 0x0d, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x42, 0x18, 0x5a, 0x16, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_example_proto_rawDescOnce sync.Once
	file_api_example_proto_rawDescData = file_api_example_proto_rawDesc
)

func file_api_example_proto_rawDescGZIP() []byte {
	file_api_example_proto_rawDescOnce.Do(func() {
		file_api_example_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_example_proto_rawDescData)
	})
	return file_api_example_proto_rawDescData
}

var file_api_example_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_example_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_api_example_proto_goTypes = []interface{}{
	(ExampleRequest_Enum)(0),        // 0: api.ExampleRequest.Enum
	(ExampleResponse_Enum)(0),       // 1: api.ExampleResponse.Enum
	(*HelloRequest)(nil),            // 2: api.HelloRequest
	(*HelloResponse)(nil),           // 3: api.HelloResponse
	(*ExampleRequest)(nil),          // 4: api.ExampleRequest
	(*ExampleResponse)(nil),         // 5: api.ExampleResponse
	(*ExampleRequest_Message)(nil),  // 6: api.ExampleRequest.Message
	(*ExampleResponse_Message)(nil), // 7: api.ExampleResponse.Message
	(*wrapperspb.BoolValue)(nil),    // 8: google.protobuf.BoolValue
	(*wrapperspb.BytesValue)(nil),   // 9: google.protobuf.BytesValue
	(*wrapperspb.DoubleValue)(nil),  // 10: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),   // 11: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),   // 12: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),   // 13: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil),  // 14: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),  // 15: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),  // 16: google.protobuf.UInt64Value
	(*timestamppb.Timestamp)(nil),   // 17: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 18: google.protobuf.Empty
}
var file_api_example_proto_depIdxs = []int32{
	0,  // 0: api.ExampleRequest.enum_value:type_name -> api.ExampleRequest.Enum
	6,  // 1: api.ExampleRequest.message_value:type_name -> api.ExampleRequest.Message
	6,  // 2: api.ExampleRequest.repeated_value:type_name -> api.ExampleRequest.Message
	8,  // 3: api.ExampleRequest.wrapperspb_bool_value:type_name -> google.protobuf.BoolValue
	9,  // 4: api.ExampleRequest.wrapperspb_bytes_value:type_name -> google.protobuf.BytesValue
	10, // 5: api.ExampleRequest.wrapperspb_double_value:type_name -> google.protobuf.DoubleValue
	11, // 6: api.ExampleRequest.wrapperspb_float_value:type_name -> google.protobuf.FloatValue
	12, // 7: api.ExampleRequest.wrapperspb_int32_value:type_name -> google.protobuf.Int32Value
	13, // 8: api.ExampleRequest.wrapperspb_int64_value:type_name -> google.protobuf.Int64Value
	14, // 9: api.ExampleRequest.wrapperspb_string_value:type_name -> google.protobuf.StringValue
	15, // 10: api.ExampleRequest.wrapperspb_uint32_value:type_name -> google.protobuf.UInt32Value
	16, // 11: api.ExampleRequest.wrapperspb_uint64_value:type_name -> google.protobuf.UInt64Value
	17, // 12: api.ExampleRequest.timestamp_value:type_name -> google.protobuf.Timestamp
	6,  // 13: api.ExampleRequest.oneof_option_a:type_name -> api.ExampleRequest.Message
	1,  // 14: api.ExampleResponse.enum_value:type_name -> api.ExampleResponse.Enum
	7,  // 15: api.ExampleResponse.message_value:type_name -> api.ExampleResponse.Message
	7,  // 16: api.ExampleResponse.repeated_value:type_name -> api.ExampleResponse.Message
	8,  // 17: api.ExampleResponse.wrapperspb_bool_value:type_name -> google.protobuf.BoolValue
	9,  // 18: api.ExampleResponse.wrapperspb_bytes_value:type_name -> google.protobuf.BytesValue
	10, // 19: api.ExampleResponse.wrapperspb_double_value:type_name -> google.protobuf.DoubleValue
	11, // 20: api.ExampleResponse.wrapperspb_float_value:type_name -> google.protobuf.FloatValue
	12, // 21: api.ExampleResponse.wrapperspb_int32_value:type_name -> google.protobuf.Int32Value
	13, // 22: api.ExampleResponse.wrapperspb_int64_value:type_name -> google.protobuf.Int64Value
	14, // 23: api.ExampleResponse.wrapperspb_string_value:type_name -> google.protobuf.StringValue
	15, // 24: api.ExampleResponse.wrapperspb_uint32_value:type_name -> google.protobuf.UInt32Value
	16, // 25: api.ExampleResponse.wrapperspb_uint64_value:type_name -> google.protobuf.UInt64Value
	17, // 26: api.ExampleResponse.timestamp_value:type_name -> google.protobuf.Timestamp
	7,  // 27: api.ExampleResponse.oneof_option_a:type_name -> api.ExampleResponse.Message
	4,  // 28: api.GreetingService.Example:input_type -> api.ExampleRequest
	18, // 29: api.GreetingService.Error:input_type -> google.protobuf.Empty
	2,  // 30: api.GreetingService.GetHello:input_type -> api.HelloRequest
	2,  // 31: api.GreetingService.PostHello:input_type -> api.HelloRequest
	2,  // 32: api.GreetingService.DeleteHello:input_type -> api.HelloRequest
	2,  // 33: api.GreetingService.PutHello:input_type -> api.HelloRequest
	2,  // 34: api.GreetingService.PatchHello:input_type -> api.HelloRequest
	5,  // 35: api.GreetingService.Example:output_type -> api.ExampleResponse
	18, // 36: api.GreetingService.Error:output_type -> google.protobuf.Empty
	3,  // 37: api.GreetingService.GetHello:output_type -> api.HelloResponse
	3,  // 38: api.GreetingService.PostHello:output_type -> api.HelloResponse
	3,  // 39: api.GreetingService.DeleteHello:output_type -> api.HelloResponse
	3,  // 40: api.GreetingService.PutHello:output_type -> api.HelloResponse
	3,  // 41: api.GreetingService.PatchHello:output_type -> api.HelloResponse
	35, // [35:42] is the sub-list for method output_type
	28, // [28:35] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_api_example_proto_init() }
func file_api_example_proto_init() {
	if File_api_example_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_example_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_example_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_example_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_example_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_example_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleRequest_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_example_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleResponse_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_example_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ExampleRequest_OneofOptionA)(nil),
		(*ExampleRequest_OneofOptionB)(nil),
		(*ExampleRequest_OneofOptionC)(nil),
	}
	file_api_example_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ExampleResponse_OneofOptionA)(nil),
		(*ExampleResponse_OneofOptionB)(nil),
		(*ExampleResponse_OneofOptionC)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_example_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_example_proto_goTypes,
		DependencyIndexes: file_api_example_proto_depIdxs,
		EnumInfos:         file_api_example_proto_enumTypes,
		MessageInfos:      file_api_example_proto_msgTypes,
	}.Build()
	File_api_example_proto = out.File
	file_api_example_proto_rawDesc = nil
	file_api_example_proto_goTypes = nil
	file_api_example_proto_depIdxs = nil
}
